Define scope (5 minutes)
    - Functional requirements
    - Non-goals
    - Who is the user?
    - How many users?
    - Usage patterns
Non-Functional Requirements/Estimations (10 minutes)
    - Traffic throughput
        - Read QPS/volume
        - Write QPS/volume
        - Read/write ratio
    - Storage estimation, data durability
High level design (10 minutes)
    - Read/write API
        - Object model
Deep dive (20 minutes)
    - API Design
        - Sync vs Async
        - Idempotency
        - Rate limiting
        - REST, RPC
        - Async - message queues, task queues, pub/sub
        - Network bandwidth, average vs peak
    - Architecture Design
        - DNS
        - CDN (push vs pull)
        - Load Balancers (Active-Passive, Active-Active, Layer 4 [Transport], Layer 7 [Application])
        - Service Mesh (Reverse proxy, AuthN/Z, Service discovery, Service routing, Health-check/metrics)
        - Storage layer
        - Cache layer
            - Locations: Client, CDN, Server, Application, Storage
            - Strategies: Cache-Aside, Read-Through, Write-Through, Write-Around, Write-Back
    - Storage Layer
        - SQL (Rigid schema, Normalized data, Vertical scaling)
            - Master-slave vs Master-master, Federation
        - NoSQL (Loose schema, Denormalized data, Horizontal scaling)
            - Key-Value, Wide-Column, Graph, Document
        - Consistency (Strong vs Eventual) vs availability (CAP theorem)
        - Replication factor (generally 3 across HA zones is ok)
        - Sharding
            - User id vs Item id
            - Hotspots
        - Transactions/distributed transactions, 2-phased commits

Optional Topics
    - Derived data
        - Batch/scheduled workflows
        - Stream processing
        - Cluster computing/MapReduce
        - Data-lake
    - Telemetry/Alarms
        - SLA Metrics
            - Latency (p50, p90, p99)
            - Uptime (99.95/99.99)
        - Distributed tracing
    - Tooling
        - CI/CD, blue-green deployments, chaos testing
